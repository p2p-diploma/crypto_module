version: '3.4'

services:
#API gateway
  api_gateway:
    image: ${DOCKER_REGISTRY-}api_gateway
    container_name: api_gateway
    build:
      context: api_gateway
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "AuthPath:Refresh=http://auth_server:8000/api/v1/refresh"
    #depends_on:
    #  - auth_server
    #  - crypto_server
    #  - lot_server
    #  - appeals_server
    #  - wallets_server
    #  - chat_server
    #  - trade_server
    ports:
      - "5227:80"
    

#For authorization service
  auth_server:
    build: 
      context: auth_module
      dockerfile: ./Dockerfile
    depends_on:
      - auth_migrate
    ports:
      - "8000:8000"
    env_file: auth_module/.env

  auth_db:
    image: postgres:14
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 5
    env_file:
      - auth_module/.database.env
    volumes:
      - postgres-data-auth:/var/lib/postgresql/data

  auth_migrate:
    build: auth_module
    depends_on:
      auth_db:
        condition: service_healthy
    entrypoint: [ "alembic", "upgrade", "head" ]
    env_file: auth_module/.env


#Trade service
  trade_server:
    build: 
      context: trade_module
      dockerfile: ./Dockerfile
    depends_on:
      - trade_migrate
    ports:
      - "8000:8000"
    env_file: trade_module/.env

  trade_db:
    image: postgres:14
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 5
    env_file:
      - trade_module/.database.env
    volumes:
      - postgres-data:/var/lib/postgresql/data

  trade_migrate:
    build: trade_module
    depends_on:
      trade_db:
        condition: service_healthy
    entrypoint: [ "alembic", "upgrade", "head" ]
    env_file: trade_module/.env

  celery:
    build: trade_module
    depends_on: [ broker, trade_server ]
    entrypoint: "celery -A core.celery_app.celery worker --loglevel=info"
    env_file:
      - trade_module/.env

  broker:
    image: redis:6


#For crypto and wallet microservices
  ganache:
    image: trufflesuite/ganache-cli
    container_name: ganache
    command: bash "npm install -g ganache && ganache-cli --host 0.0.0.0"
    restart: always
    ports:
      - "8545:8545"

  crypto_database:
    image: mongo
    container_name: crypto_database
    restart: always
    ports:
      - "27017:27017"

  crypto_server:
    image: ${DOCKER_REGISTRY-}crypto_server
    container_name: crypto_server
    build:
      context: crypto
      dockerfile: ./Crypto.Server/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "DatabaseSettings:ConnectionString=mongodb://crypto_database:27017"
      - "BlockchainConnections:Ganache=http://ganache:8545"
      - "SmartContractSettings:TokenAddress=0x6beab01817d9b12D24c2D3f6C932d6dB0C170f36"
    depends_on:
      - crypto_database
      - ganache
      - wallets_server
    ports:
      - "5227:80"
        
  wallets_server:
    image: ${DOCKER_REGISTRY-}wallets_server
    container_name: wallets_server
    build:
      context: crypto
      dockerfile: ./Wallets.Server/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "DatabaseSettings:ConnectionString=mongodb://crypto_database:27017"
      - "BlockchainConnections:Ganache=http://ganache:8545"
      - "SmartContractSettings:TokenAddress=0x6beab01817d9b12D24c2D3f6C932d6dB0C170f36"
    depends_on:
      - crypto_database
      - ganache
    ports:
      - "6227:80"

#Lot service
  lot_server:
    platform: linux/amd64
    container_name: lot_server
    build:
      context: lot_service
      dockerfile: ./Dockerfile
    image: ${DOCKER_REGISTRY-}lot_service
    depends_on:
      - auth_db
      - auth_server
    volumes:
      - ./lot_service/:/app
      - .:/lot_service
    ports:
      - "8000:8000"

#Chat service
  chat_database:
    image: redis
    container_name: chat_database
    restart: always
    ports:
      - "5379:6379"

  chat_server:
    image: ${DOCKER_REGISTRY-}chat_server
    container_name: chat_server
    build:
      context: chat_service
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:Redis=chat_database"
      - "ApiGateway=api_gateway:5227"
    depends_on:
      - chat_database
    ports:
      - "7227:80"


#Appeals
  appeals_database:
    image: mysql
    container_name: appeals_database
    restart: always
    ports:
      - 3306:3306  
 
  appeals_server:
    image: ${DOCKER_REGISTRY-}appeals_server
    container_name: appeals_server
    build:
      context: appeal_service
      dockerfile: ./Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnection=server=appeals_database;uid=root;database=appeals_db"
    depends_on:
      - appeals_database
    ports:
      - "8227:80"

volumes:
  postgres-data-auth:
  postgres-data: